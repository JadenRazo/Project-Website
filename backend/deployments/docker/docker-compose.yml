version: '3.8'

services:
  # API Service
  api:
    build:
      context: ../../
      dockerfile: deployments/docker/api/Dockerfile
    image: jadenrazo/api:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"  # Only expose to localhost, use Nginx for public access
    environment:
      - ENVIRONMENT=production
      - DB_DSN=${DB_DSN}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    # Security: Run as non-root user
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true

  # Worker Service
  worker:
    build:
      context: ../../
      dockerfile: deployments/docker/worker/Dockerfile
    image: jadenrazo/worker:latest
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DB_DSN=${DB_DSN}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ../../config:/app/config
      - ../../logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    # Security: Run as non-root user
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ../../schema.sql:/app/schema.sql:ro
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "127.0.0.1:5432:5432"  # Only expose to localhost
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    ports:
      - "127.0.0.1:6379:6379"  # Only expose to localhost
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "127.0.0.1:16686:16686"  # UI
      - "127.0.0.1:14268:14268"  # HTTP collector
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../deployments/nginx/api.conf:/etc/nginx/conf.d/default.conf:ro
      - ../../deployments/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

volumes:
  postgres_data:
    name: jadenrazo_postgres_data
  redis_data:
    name: jadenrazo_redis_data
  nginx_logs:
    name: jadenrazo_nginx_logs

networks:
  backend:
    name: jadenrazo_backend
    driver: bridge
    internal: true  # Not exposed to the public internet
  frontend:
    name: jadenrazo_frontend
    driver: bridge
